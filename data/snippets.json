[
    {
        "id": 1,
        "content": "import React, { FC, useEffect, useState } from 'react';\nimport Codemirror from '@uiw/react-codemirror';\nimport { Edit, Edit2, Edit3, ExternalLink, Save } from 'react-feather';    \nimport { CodeSnippet } from 'types';\nimport { Button, Tooltip } from '@ui';\nimport styles from './snippet.scss';\n  \n type Props = {\n    snippet: CodeSnippet;\n    loading?: boolean;\n    onSave?: (snippet: CodeSnippet) => void | Promise<void>;\n};\n\nconst toCompare = (str: string) => JSON.stringify(str.trim());\n\nexport const Snippet: FC<Props> = ({ snippet, loading, onSave }) => {\n    const [content, setContent] = useState(snippet?.content || '');\n    const [contentTouched, setContentTouched] = useState(false);\n\n    useEffect(() => {\n        setContentTouched(toCompare(content) !== toCompare(snippet.content));\n    }, [content]);\n\n    const handleSave = () => {\n        onSave && onSave({ ...snippet, content });\n        setContentTouched(false);\n    };\n\n    const controls = (\n        <div className={styles.controls}>\n            <Tooltip content=\"Open in editor\" className=\"opacity\">\n                <Button rounded background=\"grey\" color=\"black\" size=\"small\" hover>\n                    <ExternalLink size=\"14\" />\n                </Button>\n            </Tooltip>\n\n            {Boolean(onSave) && (contentTouched || loading) && (\n                <Tooltip content=\"Save\" className=\"opacity ml-xs\" onClick={handleSave}>\n                    <Button\n                        rounded\n                        background=\"grey\"\n                        color=\"black\"\n                        size=\"small\"\n                        hover\n                        loading={loading}\n                    >\n                        <Save size=\"14\" />\n                    </Button>\n                </Tooltip>\n            )}\n        </div> \n    );\n\n    return ( \n        <div className={styles.container}>\n            <div className={`${styles.inner} ${loading ? 'disabled' : ''}`}>\n                <div className=\"fill\">\n                    <Codemirror\n                        value={content}\n                        onChange={(editor) => setContent(editor.getValue())}\n                        options={{\n                            mode: snippet.lang,\n                            showCursorWhenSelecting: false,\n                            lineWrapping: true,\n                            lineNumbers: false,\n                        }}\n                    />\n                </div>\n\n                {controls}\n            </div>\n        </div>\n    );\n};",
        "lang": "javascript"
    }
]
